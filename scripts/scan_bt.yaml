mode: 'restart'
description: 'Manages the right kind of BT scan. Departure scan if everybody is home, or there was motion in the vestibule. Arrival scan if nobody is home or there was no motion in the vestibule or hall. Arrival then departure if we are unsure'
sequence:
- service: notify.logfile
  data:
    message: >-
      Scan started. Garage: car {{ states('binary_sensor.garage_door_car_contact') }}, bike {{ states('binary_sensor.garage_door_bike_contact') }}.  Vestibule {{ states('binary_sensor.vestibule_multi_occupancy') }} for {{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} seconds.  Front door {{ states('binary_sensor.pi3_front_door_sensor') }} for {{ (now()-states.binary_sensor.pi3_front_door_sensor.last_changed).seconds }} seconds. 
- choose:
  #################### ####################
  # If we've just marked somebody as Just Arrived then don't run a departure scan if the garage door is still open.
  # 
  # This is to catch the situation when we come home, open the front door to put in shopping, then
  # close the door while we put the car away.
  #################### ####################
  # Everybody away
  - conditions:
    # Everybody is away - this can only be an arrival
    - condition: numeric_state
      entity_id: sensor.home_count
      below: 0.1
    sequence:
    - service: notify.logfile
      data:
        message: "Arrival scan because nobody is home"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Far garage door open, near one closed, motion in the vestibule
  - conditions:
    # If the far garage door is open, and the near one is closed, we're likely going to the bike
    - condition: state
      entity_id: binary_sensor.garage_door_bike_contact
      state: 'on'
    - condition: state
      entity_id: binary_sensor.garage_door_car_contact
      state: 'off'
    # Something happen in the vestibule recently
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'on'
        for: '00:00:01'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'off'
          for: '00:02:00'
    sequence:
    # Check for departure, then check for arrival (just in case)
    - service: notify.logfile
      data:
        message: "Do nothing because of motion in the vestibule, and the bike door is open"
  #################### ####################
  - conditions:
    # Something happen in the vestibule recently
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'on'
        for: '00:00:07'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'off'
          for: '00:02:00'
    sequence:
    # Check for departure, then check for arrival (just in case)
    - service: notify.logfile
      data:
        message: "Departure (no arrival) scan because of motion in the vestibule ({{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_depart
    #- delay: '00:00:30'
    #- service: script.turn_on
    #  entity_id: script.scan_bt_arrive
  #################### ####################
  # No motion inside
  - conditions:
    # Nothing happened recently inside 
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.vestibule_multi_occupancy
        state: 'off'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.vestibule_multi_occupancy
          state: 'on'
          for: '00:00:07'
    sequence:
    - service: notify.logfile
      data:
        message: "Arrival scan because there was no motion in the vestibule ({{ (now()-states.binary_sensor.vestibule_multi_occupancy.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Car door is open
  - conditions:
    # Garage door is open already, or recently closed
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.garage_door_bike_contact
        state: 'on'
        for: '00:00:01'
      - condition: not
        conditions:
        - condition: state
          entity_id: binary_sensor.garage_door_car_contact
          state: 'off'
          for: '00:00:30'
    sequence:
    - service: notify.logfile
      data:
        message: "Arrival scan because the garage door is open ({{ (now()-states.binary_sensor.garage_door_car_contact.last_changed).seconds }} ago)"
    - service: script.turn_on
      entity_id: script.scan_bt_arrive
  #################### ####################
  # Everybody is home
  - conditions:
    # Nobody is away - this can only be a departure
    - condition: numeric_state
      entity_id: sensor.home_count
      above: 0.9
    sequence:
    - service: notify.logfile
      data:
        message: "Departure scan because everybody is home"
    - service: script.turn_on
      entity_id: script.scan_bt_depart
  #################### ####################
  # Mixed bag situation unclear, do it all
  default:
  - service: notify.logfile
    data:
      message: "Departure then arrival scan because we have no idea"
  - service: script.turn_on
    entity_id: script.scan_bt_arrive
  - delay: '00:00:30'
  - service: script.turn_on
    entity_id: script.scan_bt_depart
